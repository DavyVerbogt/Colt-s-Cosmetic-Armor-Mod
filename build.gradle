import groovy.transform.Field

import java.util.jar.Attributes
import java.util.jar.JarFile
import java.util.jar.Manifest
import java.util.zip.ZipInputStream

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
/*
plugins {
    id 'org.ajoberstar.grgit' version '1.7.2'
}
*/
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

final commitId

if (hasProperty("grgit")) { // If there's a valid Git repository, get the latest commit ID
    commitId = "${grgit.head().abbreviatedId}"
} else { // Else fall back to NOGIT
    commitId = "NOGIT"
}

version = '1.0'
group = 'com.Colt.ColtCosmeticArmorMod' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'ColtCosmeticArmorMod'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20201028-1.16.3'

    // makeObfSourceJar = false // an SRG named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

/*
repositories {
    mavenCentral()
    maven { url = "http://dvs1.progwml6.com/files/maven/" }
    maven { url = "https://maven.tehnut.info" }
    maven { url = 'https://jitpack.io/' }

    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }

}*/

repositories {
    maven {
        name "curios"
        url "https://maven.theillusivec4.top/"
    }

    maven {
        url "https://www.cursemaven.com"
    }

    maven {
        url "https://maven.tterrag.com/"
    }
    maven {
        name "jei"
        url "https://dvs1.progwml6.com/files/maven/"
    }
}

configurations {
    embed {
        transitive = false
    }

    compile.extendsFrom embed
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.4-35.1.4'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"
    compileOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.1.71:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.1.71")

    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.5-4.0.4.0:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.5-4.0.4.0")


    // Compile against the Hwyla API, but do not include it at runtime

//    deobfCompile "com.github.azanor:Baubles:${baubles_version}"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll(['-Xlint:unchecked', '-Xlint:deprecation'])
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

artifacts {
    /*
     TODO: Uncomment when Hwyla fixes its Javadoc errors or I find a way to ignore them
     https://forums.minecraftforge.net/topic/92633-ignoring-javadoc-errors-in-dependencies/
     https://github.com/TehNut/HWYLA/issues/303
     https://stackoverflow.com/questions/64619620/ignoring-javadoc-errors-in-dependencies
     */
//    archives javadocJar
}


// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

// makeLibraryMetas task adapted from covers1624's ContainedDepsPlugin:
// https://github.com/covers1624/GradleStuff
// TODO: Contained dependencies are disabled in 1.14, re-evaluate when they're re-enabled
@Field def MAVEN_ARTIFACT = new Attributes.Name("Maven-Artifact")

task makeLibraryMetas {
    outputs.upToDateWhen { false }

    def temp = getTemporaryDir()
    if (temp.exists()) {
        delete temp.listFiles()
    }

    def configuration = configurations.embed

    configuration.getResolvedConfiguration().getResolvedArtifacts().forEach { dep ->
        def file = dep.getFile()
        def mavenArtifact = dep.getId().getComponentIdentifier().toString()
        if (!hasMavenArtifactAttribute(file)) {
            def manifest = new Manifest()
            def attributes = manifest.getMainAttributes()
            attributes.put Attributes.Name.MANIFEST_VERSION, "1.0"
            attributes.put MAVEN_ARTIFACT, mavenArtifact

            new File(temp, file.getName() + ".meta").withOutputStream { os ->
                manifest.write(os)
            }
        }
    }

    def str = configuration.collect { file -> file.getName() }.join(" ")
    def tasks = project.tasks.withType(Jar.class)
    tasks.each { task -> task.from temp, { CopySpec spec -> spec.rename '(.+.jar.meta)', 'META-INF/libraries/$1' } }
    tasks.each { task -> task.from configuration, { CopySpec spec -> spec.rename '(.+.jar)', 'META-INF/libraries/$1' } }
    tasks.each { task -> task.getManifest().getAttributes().putAt 'ContainedDeps', str }
}

tasks.withType(Jar.class).each { task ->
    task.dependsOn(makeLibraryMetas)
}

boolean hasMavenArtifactAttribute(File file) {
    def zi = new ZipInputStream((InputStream) new FileInputStream(file))

    def ze = zi.getNextEntry()
    while (ze != null) {
        if (ze.getName().equalsIgnoreCase(JarFile.MANIFEST_NAME)) {
            def manifest = new Manifest((InputStream) zi)
            if (manifest.getMainAttributes().containsKey(MAVEN_ARTIFACT)) {
                zi.closeQuietly()
                return true
            }
        }
        ze = zi.getNextEntry()
    }

    try {
        zi.close()
    }
    catch (ignored) {
    }

    return false

            //artifact jar
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
